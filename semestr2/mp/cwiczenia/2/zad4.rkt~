#lang racket

(define-struct matrix (a b c d))

(define (print n) (list (matrix-a n) (matrix-b n) (matrix-c n) (matrix-d n)))

(define (matrix-mult m n)
  (make-matrix
   (+ (* (matrix-a m) (matrix-a n)) (* (matrix-b m) (matrix-c n)))
   (+ (* (matrix-a m) (matrix-b n)) (* (matrix-b m) (matrix-d n)))
   (+ (* (matrix-c m) (matrix-a n)) (* (matrix-d m) (matrix-c n)))
   (+ (* (matrix-c m) (matrix-b n)) (* (matrix-d m) (matrix-d n)))))
(print (matrix-mult m n))

(define (mod n k)
  (if (= (* (/ n k) k) n)
      #t
      #f))

(define (matrix-expt-fast m k)
  (cond [(= k 1) m]
        [(mod k 2) (matrix-expt-fast (matrix-expt-fast m (/ k 2)) 2)]
        [else (matrix-mult m (matrix-expt m (- k 1)))]))


(define (fib-matrix k)
  (define m (matrix-expt-fast (make-matrix 1 1 1 0) k))
  (matrix-b m))
