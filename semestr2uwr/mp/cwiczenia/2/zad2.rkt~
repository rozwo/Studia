#lang racket

(define (fib n)
  (cond [(= n 0) 0]
        [(= n 1) 1]
        [(> n 1) (+ (fib (- n 1)) (fib (- n 2)))]
        [else "blad"]))
; (fib 5) -> (cond ...)
; -> ( (silnia 4))
; -> (+ (fib 4) (fib 3))
; -> (+ (+ (fib 3) (fib 2)) (+ (fib 2) (fib 1)))
; -> (+ (+ (+ (fib 2) (fib 1)) (+ (fib 1) (fib 0))) (+ (+ (fib 1) (fib 0)) 1))
; -> (+ (+ (+ (+ (fib 1) (fib 0)) 1) (+ 1 0)) (+ (+ 1 0) 1))
; -> (+ (+ (+ (+ 1 0) 1) 1) (+ 1 1))
; -> (+ (+ (+ 1 1) 1) 2)
; -> (+ (+ 2 1) 2)
; -> (+ 3 2)
; -> 5

(define (fib-iter n)
  (define (it n x y)
    (cond [(and (= n 0) (= y 0)) 0]
          [(and (= n 1) (= y 0)) 1]
          [(and (> n 1) (= y 0)) (it (- n 1) 0 1)]
          [(and (= n 0) (> y 0)) y]
          [else (it (- n 1) y (+ x y))]))
  (it n 0 0))
; (fib-iter 5)
; -> (it 5 0 0)
; -> (it 4 0 1)
; -> (it 3 1 1)
; -> (it 2 1 2)
; -> (it 1 2 3)
; -> (it 0 3 5)
; -> 5